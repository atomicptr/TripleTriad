local Grid = require "modules.grid"
local Ruleset = require "main.data.rulesets"

local tbl = require "modules.tbl"

local Pos = Grid.Pos

local card_pos = {
    [Pos.North] = {
        [Pos.West] = vmath.vector3(-200, 200, 0),
        [Pos.Center] = vmath.vector3(0, 200, 0),
        [Pos.East] = vmath.vector3(200, 200, 0),
    },
    [Pos.Center] = {
        [Pos.West] = vmath.vector3(-200, 0, 0),
        [Pos.Center] = vmath.vector3(0, 0, 0),
        [Pos.East] = vmath.vector3(200, 0, 0),
    },
    [Pos.South] = {
        [Pos.West] = vmath.vector3(-200, -200, 0),
        [Pos.Center] = vmath.vector3(0, -200, 0),
        [Pos.East] = vmath.vector3(200, -200, 0),
    },
}

---@class Board
---@field field table
---@field selected_card integer
---@field cursor_moving boolean
---@field cursor_row Pos
---@field cursor_col Pos
---@field cards table<Pos, table<Pos, userdata|nil>>
---@field cards_to_flip CardSlot[]
---@field elements userdata[]

---@param self Board
---@param rules Ruleset[]
---@param element_placements ElementPlacement[]
local function reset(self, rules, element_placements)
    local is_elemental = tbl.contains(rules, Ruleset.Elemental)

    if self.elements then
        for _, element in ipairs(self.elements) do
            go.delete(element)
        end
    end

    if self.cards then
        Grid.for_each(function(row, col)
            if self.cards[row][col] then
                go.delete(self.cards[row][col])
            end
        end)
    end

    self.selected_card = nil
    self.cursor_row = Pos.Center
    self.cursor_col = Pos.Center
    self.cursor_moving = false
    self.cards = {
        [Pos.North] = {
            [Pos.West] = nil,
            [Pos.Center] = nil,
            [Pos.East] = nil,
        },
        [Pos.Center] = {
            [Pos.West] = nil,
            [Pos.Center] = nil,
            [Pos.East] = nil,
        },
        [Pos.South] = {
            [Pos.West] = nil,
            [Pos.Center] = nil,
            [Pos.East] = nil,
        },
    }

    if is_elemental then
        self.elements = {}

        for _, ep in ipairs(element_placements) do
            local pos = card_pos[ep.pos.row][ep.pos.col]
            pos.z = 0.1

            local id = factory.create("#element_factory", pos)

            msg.post(id, "set_element", {
                element = ep.element,
            })

            table.insert(self.elements, id)
        end
    end
end

---@param self Board
function init(self)
    reset(self, {}, {})
end

---@param self Board
---@param row Pos
---@param col Pos
---@param skip_anim boolean|nil
function set_cursor(self, row, col, skip_anim)
    self.cursor_row = row
    self.cursor_col = col

    msg.post("/cursor", "move", {
        target_pos = card_pos[self.cursor_row][self.cursor_col],
        skip_anim = skip_anim,
    })
end

---@param self Board
---@param direction "up"|"down"|"left"|"right"
local function apply_cursor_movement(self, direction)
    if direction == "up" then
        if self.cursor_row == Pos.North then
            set_cursor(self, Pos.South, self.cursor_col)
        elseif self.cursor_row == Pos.Center then
            set_cursor(self, Pos.North, self.cursor_col)
        else
            set_cursor(self, Pos.Center, self.cursor_col)
        end
    elseif direction == "down" then
        if self.cursor_row == Pos.North then
            set_cursor(self, Pos.Center, self.cursor_col)
        elseif self.cursor_row == Pos.Center then
            set_cursor(self, Pos.South, self.cursor_col)
        else
            set_cursor(self, Pos.North, self.cursor_col)
        end
    elseif direction == "left" then
        if self.cursor_col == Pos.West then
            set_cursor(self, self.cursor_row, Pos.East)
        elseif self.cursor_col == Pos.Center then
            set_cursor(self, self.cursor_row, Pos.West)
        else
            set_cursor(self, self.cursor_row, Pos.Center)
        end
    elseif direction == "right" then
        if self.cursor_col == Pos.West then
            set_cursor(self, self.cursor_row, Pos.Center)
        elseif self.cursor_col == Pos.Center then
            set_cursor(self, self.cursor_row, Pos.East)
        else
            set_cursor(self, self.cursor_row, Pos.West)
        end
    end
end

local function spawn_card(self, card, cpos, owner)
    local pos = card_pos[cpos.row][cpos.col]
    pos.z = 5.0

    local id = factory.create("#card_factory", pos, nil, {
        card_id = card,
        player_card = owner == "player",
    })

    self.cards[cpos.row][cpos.col] = id

    return id
end

---@param self Board
---@param player_card boolean
function place_card(self, player_card)
    local owner = "enemy"

    if player_card then
        owner = "player"
    end

    local id = spawn_card(self, self.selected_card, { row = self.cursor_row, col = self.cursor_col }, owner)

    msg.post("/game", "board_place_card_finished", {
        id = id,
        card = self.selected_card,
        row = self.cursor_row,
        col = self.cursor_col,
    })

    self.selected_card = nil
end

local function flip_card(self)
    local card = table.remove(self.cards_to_flip)
    local id = self.cards[card.row][card.col]

    if not id then
        return
    end

    msg.post(id, "flip")
end

---@param self Board
---@param message_id hash
---@param message table
---@param sender hash
function on_message(self, message_id, message, sender)
    if message_id == hash "reset" then
        pprint("board: reset", message)
        reset(self, message.rules or {}, message.element_placements or {})
    elseif message_id == hash "init" then
        pprint("board: init", message)

        self.selected_card = message.selected_card
        set_cursor(self, Pos.Center, Pos.Center, true)
    elseif message_id == hash "select" then
        pprint("board: select", message)

        msg.post("/game", "board_request_place_card", {
            card = self.selected_card,
            row = self.cursor_row,
            col = self.cursor_col,
        })
    elseif message_id == hash "place_card" then
        pprint("board: place_card", message.player_card)

        place_card(self, message.player_card)
    elseif message_id == hash "enemy_place" then
        pprint("board: enemy_place", message)

        self.selected_card = message.selected_card

        set_cursor(self, message.row, message.col, true)
        place_card(self, false)
    elseif message_id == hash "move_cursor" then
        pprint("board: move_cursor", message)

        apply_cursor_movement(self, message.direction)
    elseif message_id == hash "flip_cards" then
        pprint("board: flip_cards", message)

        self.cards_to_flip = message.targets
        flip_card(self)
    elseif message_id == hash "card_finished_flipping" then
        pprint("board: card_finished_flipping", message)

        if tbl.count(self.cards_to_flip) == 0 then
            msg.post("/game", "board_finished_flipping")
            return
        end

        flip_card(self)
    elseif message_id == hash "cursor_done_moving" then
        self.cursor_moving = false
    elseif message_id == hash "setup_spawn_card" then
        pprint("board: setup_spawn_card", message)
        spawn_card(self, message.card_id, message.card_pos, message.owner)
    end
end
