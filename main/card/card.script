local Element = require "main.data.elements"
local cards = require "main.data.cards"

local PLAYER_COLORS = {
    vmath.vector4(192 / 255, 213 / 255, 240 / 255, 1),
    vmath.vector4(45 / 255, 65 / 255, 119 / 255, 1),
}

local ENEMY_COLORS = {
    vmath.vector4(225 / 255, 172 / 255, 194 / 255, 1),
    vmath.vector4(91 / 255, 37 / 255, 49 / 255, 1),
}

go.property("card_id", 1)
go.property("player_card", false)
go.property("visible", true)

---@param rank integer
---@return hash
local function card_rank(rank)
    if rank >= 10 then
        return hash "A"
    end
    if rank <= 0 then
        return hash "0"
    end
    return hash(tostring(rank))
end

---@param element Element
---@return hash
local function element_hash(element)
    if element == Element.Earth then
        return hash "earth"
    elseif element == Element.Fire then
        return hash "fire"
    elseif element == Element.Holy then
        return hash "holy"
    elseif element == Element.Ice then
        return hash "ice"
    elseif element == Element.Poison then
        return hash "poison"
    elseif element == Element.Thunder then
        return hash "thunder"
    elseif element == Element.Water then
        return hash "water"
    elseif element == Element.Wind then
        return hash "wind"
    end

    return hash "unreachable"
end

local function setup_card(self)
    self.card = cards[self.card_id]

    if not self.visible then
        sprite.play_flipbook("#front", hash "card-back")
        msg.post("#back", "disable")

        msg.post("#rank_top", "disable")
        msg.post("#rank_bottom", "disable")
        msg.post("#rank_left", "disable")
        msg.post("#rank_right", "disable")

        msg.post("#element", "disable")
        msg.post("#elementmod", "disable")
        return
    end

    sprite.play_flipbook("#front", hash(self.card_id))

    sprite.play_flipbook("#rank_top", card_rank(self.card.top + self.modifier))
    sprite.play_flipbook("#rank_bottom", card_rank(self.card.bottom + self.modifier))
    sprite.play_flipbook("#rank_left", card_rank(self.card.left + self.modifier))
    sprite.play_flipbook("#rank_right", card_rank(self.card.right + self.modifier))

    if self.card.element then
        sprite.play_flipbook("#element", element_hash(self.card.element))
    else
        msg.post("#element", "disable")
    end

    if self.modifier ~= 0 then
        msg.post("#elementmod", "enable")

        if self.modifier > 0 then
            sprite.play_flipbook("#elementmod", "element-positive-text")
        else
            sprite.play_flipbook("#elementmod", "element-negative-text")
        end
    else
        msg.post("#elementmod", "disable")
    end
end

local function set_background(self)
    if self.player_card then
        go.set("#back", "top_color", PLAYER_COLORS[1])
        go.set("#back", "bottom_color", PLAYER_COLORS[2])
    else
        go.set("#back", "top_color", ENEMY_COLORS[1])
        go.set("#back", "bottom_color", ENEMY_COLORS[2])
    end
end

function init(self)
    self.modifier = 0

    set_background(self)
    setup_card(self)
end

---@param self table
---@param message_id hash
---@param message table
---@param sender hash
function on_message(self, message_id, message, sender)
    if message_id == hash "flip" then
        -- TODO: play cool animation
        self.player_card = not self.player_card
        set_background(self)

        msg.post("/game", "card_flipped")

        -- TODO: after animation is done, call back
        msg.post("/board", "card_finished_flipping")
    elseif message_id == hash "set_modifier" then
        self.modifier = message.modifier or 0
        setup_card(self)
    end
end
